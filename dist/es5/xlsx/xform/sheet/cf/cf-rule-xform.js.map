{"version":3,"file":"cf-rule-xform.js","names":["BaseXform","require","CompositeXform","Range","DatabarXform","ExtLstRefXform","FormulaXform","ColorScaleXform","IconSetXform","extIcons","getTextFormula","model","formulae","range","ref","tl","operator","concat","text","undefined","getTimePeriodFormula","timePeriod","opType","attributes","type","CfRuleXform","_CompositeXform","_inherits","_super","_createSuper","_this","_classCallCheck","call","map","dataBar","databarXform","extLst","extLstRefXform","formula","formulaXform","colorScale","colorScaleXform","iconSet","iconSetXform","_createClass","key","get","value","render","xmlStream","renderExpression","renderCellIs","renderTop10","renderAboveAverage","renderDataBar","renderColorScale","renderIconSet","renderText","renderTimePeriod","openNode","tag","dxfId","priority","closeNode","_this2","forEach","leafNode","percent","toBoolAttribute","bottom","rank","toIntValue","aboveAverage","isPrimitive","toStringAttribute","createNewModel","_ref","_objectSpread","toBoolValue","onParserClose","name","parser","Object","assign","push","rule","custom","module","exports"],"sources":["../../../../../../lib/xlsx/xform/sheet/cf/cf-rule-xform.js"],"sourcesContent":["const BaseXform = require('../../base-xform');\nconst CompositeXform = require('../../composite-xform');\n\nconst Range = require('../../../../doc/range');\n\nconst DatabarXform = require('./databar-xform');\nconst ExtLstRefXform = require('./ext-lst-ref-xform');\nconst FormulaXform = require('./formula-xform');\nconst ColorScaleXform = require('./color-scale-xform');\nconst IconSetXform = require('./icon-set-xform');\n\nconst extIcons = {\n  '3Triangles': true,\n  '3Stars': true,\n  '5Boxes': true,\n};\n\nconst getTextFormula = model => {\n  if (model.formulae && model.formulae[0]) {\n    return model.formulae[0];\n  }\n\n  const range = new Range(model.ref);\n  const {tl} = range;\n  switch (model.operator) {\n    case 'containsText':\n      return `NOT(ISERROR(SEARCH(\"${model.text}\",${tl})))`;\n    case 'containsBlanks':\n      return `LEN(TRIM(${tl}))=0`;\n    case 'notContainsBlanks':\n      return `LEN(TRIM(${tl}))>0`;\n    case 'containsErrors':\n      return `ISERROR(${tl})`;\n    case 'notContainsErrors':\n      return `NOT(ISERROR(${tl}))`;\n    default:\n      return undefined;\n  }\n};\n\nconst getTimePeriodFormula = model => {\n  if (model.formulae && model.formulae[0]) {\n    return model.formulae[0];\n  }\n\n  const range = new Range(model.ref);\n  const {tl} = range;\n  switch (model.timePeriod) {\n    case 'thisWeek':\n      return `AND(TODAY()-ROUNDDOWN(${tl},0)<=WEEKDAY(TODAY())-1,ROUNDDOWN(${tl},0)-TODAY()<=7-WEEKDAY(TODAY()))`;\n    case 'lastWeek':\n      return `AND(TODAY()-ROUNDDOWN(${tl},0)>=(WEEKDAY(TODAY())),TODAY()-ROUNDDOWN(${tl},0)<(WEEKDAY(TODAY())+7))`;\n    case 'nextWeek':\n      return `AND(ROUNDDOWN(${tl},0)-TODAY()>(7-WEEKDAY(TODAY())),ROUNDDOWN(${tl},0)-TODAY()<(15-WEEKDAY(TODAY())))`;\n    case 'yesterday':\n      return `FLOOR(${tl},1)=TODAY()-1`;\n    case 'today':\n      return `FLOOR(${tl},1)=TODAY()`;\n    case 'tomorrow':\n      return `FLOOR(${tl},1)=TODAY()+1`;\n    case 'last7Days':\n      return `AND(TODAY()-FLOOR(${tl},1)<=6,FLOOR(${tl},1)<=TODAY())`;\n    case 'lastMonth':\n      return `AND(MONTH(${tl})=MONTH(EDATE(TODAY(),0-1)),YEAR(${tl})=YEAR(EDATE(TODAY(),0-1)))`;\n    case 'thisMonth':\n      return `AND(MONTH(${tl})=MONTH(TODAY()),YEAR(${tl})=YEAR(TODAY()))`;\n    case 'nextMonth':\n      return `AND(MONTH(${tl})=MONTH(EDATE(TODAY(),0+1)),YEAR(${tl})=YEAR(EDATE(TODAY(),0+1)))`;\n    default:\n      return undefined;\n  }\n};\n\nconst opType = attributes => {\n  const {type, operator} = attributes;\n  switch (type) {\n    case 'containsText':\n    case 'containsBlanks':\n    case 'notContainsBlanks':\n    case 'containsErrors':\n    case 'notContainsErrors':\n      return {\n        type: 'containsText',\n        operator: type,\n      };\n\n    default:\n      return {type, operator};\n  }\n};\n\nclass CfRuleXform extends CompositeXform {\n  constructor() {\n    super();\n\n    this.map = {\n      dataBar: (this.databarXform = new DatabarXform()),\n      extLst: (this.extLstRefXform = new ExtLstRefXform()),\n      formula: (this.formulaXform = new FormulaXform()),\n      colorScale: (this.colorScaleXform = new ColorScaleXform()),\n      iconSet: (this.iconSetXform = new IconSetXform()),\n    };\n  }\n\n  get tag() {\n    return 'cfRule';\n  }\n\n  static isPrimitive(rule) {\n    // is this rule primitive?\n    if (rule.type === 'iconSet') {\n      if (rule.custom || extIcons[rule.iconSet]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  render(xmlStream, model) {\n    switch (model.type) {\n      case 'expression':\n        this.renderExpression(xmlStream, model);\n        break;\n      case 'cellIs':\n        this.renderCellIs(xmlStream, model);\n        break;\n      case 'top10':\n        this.renderTop10(xmlStream, model);\n        break;\n      case 'aboveAverage':\n        this.renderAboveAverage(xmlStream, model);\n        break;\n      case 'dataBar':\n        this.renderDataBar(xmlStream, model);\n        break;\n      case 'colorScale':\n        this.renderColorScale(xmlStream, model);\n        break;\n      case 'iconSet':\n        this.renderIconSet(xmlStream, model);\n        break;\n      case 'containsText':\n        this.renderText(xmlStream, model);\n        break;\n      case 'timePeriod':\n        this.renderTimePeriod(xmlStream, model);\n        break;\n    }\n  }\n\n  renderExpression(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'expression',\n      dxfId: model.dxfId,\n      priority: model.priority,\n    });\n\n    this.formulaXform.render(xmlStream, model.formulae[0]);\n\n    xmlStream.closeNode();\n  }\n\n  renderCellIs(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'cellIs',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      operator: model.operator,\n    });\n\n    model.formulae.forEach(formula => {\n      this.formulaXform.render(xmlStream, formula);\n    });\n\n    xmlStream.closeNode();\n  }\n\n  renderTop10(xmlStream, model) {\n    xmlStream.leafNode(this.tag, {\n      type: 'top10',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      percent: BaseXform.toBoolAttribute(model.percent, false),\n      bottom: BaseXform.toBoolAttribute(model.bottom, false),\n      rank: BaseXform.toIntValue(model.rank, 10, true),\n    });\n  }\n\n  renderAboveAverage(xmlStream, model) {\n    xmlStream.leafNode(this.tag, {\n      type: 'aboveAverage',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      aboveAverage: BaseXform.toBoolAttribute(model.aboveAverage, true),\n    });\n  }\n\n  renderDataBar(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'dataBar',\n      priority: model.priority,\n    });\n\n    this.databarXform.render(xmlStream, model);\n    this.extLstRefXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderColorScale(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'colorScale',\n      priority: model.priority,\n    });\n\n    this.colorScaleXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderIconSet(xmlStream, model) {\n    // iconset is all primitive or all extLst\n    if (!CfRuleXform.isPrimitive(model)) {\n      return;\n    }\n\n    xmlStream.openNode(this.tag, {\n      type: 'iconSet',\n      priority: model.priority,\n    });\n\n    this.iconSetXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderText(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: model.operator,\n      dxfId: model.dxfId,\n      priority: model.priority,\n      operator: BaseXform.toStringAttribute(model.operator, 'containsText'),\n    });\n\n    const formula = getTextFormula(model);\n    if (formula) {\n      this.formulaXform.render(xmlStream, formula);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  renderTimePeriod(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'timePeriod',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      timePeriod: model.timePeriod,\n    });\n\n    const formula = getTimePeriodFormula(model);\n    if (formula) {\n      this.formulaXform.render(xmlStream, formula);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  createNewModel({attributes}) {\n    return {\n      ...opType(attributes),\n      dxfId: BaseXform.toIntValue(attributes.dxfId),\n      priority: BaseXform.toIntValue(attributes.priority),\n      timePeriod: attributes.timePeriod,\n      percent: BaseXform.toBoolValue(attributes.percent),\n      bottom: BaseXform.toBoolValue(attributes.bottom),\n      rank: BaseXform.toIntValue(attributes.rank),\n      aboveAverage: BaseXform.toBoolValue(attributes.aboveAverage),\n    };\n  }\n\n  onParserClose(name, parser) {\n    switch (name) {\n      case 'dataBar':\n      case 'extLst':\n      case 'colorScale':\n      case 'iconSet':\n        // merge parser model with ours\n        Object.assign(this.model, parser.model);\n        break;\n\n      case 'formula':\n        // except - formula is a string and appends to formulae\n        this.model.formulae = this.model.formulae || [];\n        this.model.formulae.push(parser.model);\n        break;\n    }\n  }\n}\n\nmodule.exports = CfRuleXform;\n"],"mappings":"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"}
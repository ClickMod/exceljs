{"version":3,"file":"stream-converter.js","names":["jconv","StreamConverter","inner","options","_classCallCheck","innerEncoding","toUpperCase","outerEncoding","innerBOM","outerBOM","writeStarted","_createClass","key","value","convertInwards","data","Buffer","from","convert","convertOutwards","addListener","event","handler","removeListener","write","encoding","callback","Function","undefined","length","bomless","alloc","copy","read","pipe","destination","reverseConverter","close","on","type","_this","chunk","once","end","emit","module","exports"],"sources":["../../../lib/csv/stream-converter.js"],"sourcesContent":["// =======================================================================================================\n// StreamConverter\n//\n// convert between encoding schemes in a stream\n// Work in Progress - Will complete this at some point\nlet jconv;\n\nclass StreamConverter {\n  constructor(inner, options) {\n    this.inner = inner;\n\n    options = options || {};\n    this.innerEncoding = (options.innerEncoding || 'UTF8').toUpperCase();\n    this.outerEncoding = (options.outerEncoding || 'UTF8').toUpperCase();\n\n    this.innerBOM = options.innerBOM || null;\n    this.outerBOM = options.outerBOM || null;\n\n    this.writeStarted = false;\n  }\n\n  convertInwards(data) {\n    if (data) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data, this.outerEncoding);\n      }\n\n      if (this.innerEncoding !== this.outerEncoding) {\n        data = jconv.convert(data, this.outerEncoding, this.innerEncoding);\n      }\n    }\n\n    return data;\n  }\n\n  convertOutwards(data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data, this.innerEncoding);\n    }\n\n    if (this.innerEncoding !== this.outerEncoding) {\n      data = jconv.convert(data, this.innerEncoding, this.outerEncoding);\n    }\n    return data;\n  }\n\n  addListener(event, handler) {\n    this.inner.addListener(event, handler);\n  }\n\n  removeListener(event, handler) {\n    this.inner.removeListener(event, handler);\n  }\n\n  write(data, encoding, callback) {\n    if (encoding instanceof Function) {\n      callback = encoding;\n      encoding = undefined;\n    }\n\n    if (!this.writeStarted) {\n      // if inner encoding has BOM, write it now\n      if (this.innerBOM) {\n        this.inner.write(this.innerBOM);\n      }\n\n      // if outer encoding has BOM, delete it now\n      if (this.outerBOM) {\n        if (data.length <= this.outerBOM.length) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n        const bomless = Buffer.alloc(data.length - this.outerBOM.length);\n        data.copy(bomless, 0, this.outerBOM.length, data.length);\n        data = bomless;\n      }\n\n      this.writeStarted = true;\n    }\n\n    this.inner.write(\n      this.convertInwards(data),\n      encoding ? this.innerEncoding : undefined,\n      callback\n    );\n  }\n\n  read() {\n    // TBD\n  }\n\n  pipe(destination, options) {\n    const reverseConverter = new StreamConverter(destination, {\n      innerEncoding: this.outerEncoding,\n      outerEncoding: this.innerEncoding,\n      innerBOM: this.outerBOM,\n      outerBOM: this.innerBOM,\n    });\n\n    this.inner.pipe(reverseConverter, options);\n  }\n\n  close() {\n    this.inner.close();\n  }\n\n  on(type, callback) {\n    switch (type) {\n      case 'data':\n        this.inner.on('data', chunk => {\n          callback(this.convertOutwards(chunk));\n        });\n        return this;\n      default:\n        this.inner.on(type, callback);\n        return this;\n    }\n  }\n\n  once(type, callback) {\n    this.inner.once(type, callback);\n  }\n\n  end(chunk, encoding, callback) {\n    this.inner.end(this.convertInwards(chunk), this.innerEncoding, callback);\n  }\n\n  emit(type, value) {\n    this.inner.emit(type, value);\n  }\n}\n\nmodule.exports = StreamConverter;\n"],"mappings":"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"}
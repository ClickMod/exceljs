{"version":3,"file":"defined-names.js","names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_","require","colCache","CellMatrix","Range","rangeRegexp","DefinedNames","matrixMap","value","getMatrix","name","matrix","add","locStr","location","decodeEx","addEx","top","col","left","right","row","bottom","address","sheetName","n2l","addCellEx","remove","removeEx","removeCellEx","removeAllNames","each","forEach","callback","cell","getNames","addressStr","getNamesEx","map","findCellEx","filter","Boolean","_explore","mark","range","x","y","vGrow","yy","edge","c","findCellAt","hGrow","xx","cells","push","getRanges","_this","ranges","$shortRange","normaliseMatrix","forEachInSheet","spliceRows","start","numDelete","numInsert","_this2","spliceColumns","_this3","get","_this4","definedName","set","rangeStr","test","split","pop","addCell","module","exports"],"sources":["../../../lib/doc/defined-names.js"],"sourcesContent":["'use strict';\n\nconst _ = require('../utils/under-dash');\nconst colCache = require('../utils/col-cache');\nconst CellMatrix = require('../utils/cell-matrix');\nconst Range = require('./range');\n\nconst rangeRegexp = /[$](\\w+)[$](\\d+)(:[$](\\w+)[$](\\d+))?/;\n\nclass DefinedNames {\n  constructor() {\n    this.matrixMap = {};\n  }\n\n  getMatrix(name) {\n    const matrix = this.matrixMap[name] || (this.matrixMap[name] = new CellMatrix());\n    return matrix;\n  }\n\n  // add a name to a cell. locStr in the form SheetName!$col$row or SheetName!$c1$r1:$c2:$r2\n  add(locStr, name) {\n    const location = colCache.decodeEx(locStr);\n    this.addEx(location, name);\n  }\n\n  addEx(location, name) {\n    const matrix = this.getMatrix(name);\n    if (location.top) {\n      for (let col = location.left; col <= location.right; col++) {\n        for (let row = location.top; row <= location.bottom; row++) {\n          const address = {\n            sheetName: location.sheetName,\n            address: colCache.n2l(col) + row,\n            row,\n            col,\n          };\n\n          matrix.addCellEx(address);\n        }\n      }\n    } else {\n      matrix.addCellEx(location);\n    }\n  }\n\n  remove(locStr, name) {\n    const location = colCache.decodeEx(locStr);\n    this.removeEx(location, name);\n  }\n\n  removeEx(location, name) {\n    const matrix = this.getMatrix(name);\n    matrix.removeCellEx(location);\n  }\n\n  removeAllNames(location) {\n    _.each(this.matrixMap, matrix => {\n      matrix.removeCellEx(location);\n    });\n  }\n\n  forEach(callback) {\n    _.each(this.matrixMap, (matrix, name) => {\n      matrix.forEach(cell => {\n        callback(name, cell);\n      });\n    });\n  }\n\n  // get all the names of a cell\n  getNames(addressStr) {\n    return this.getNamesEx(colCache.decodeEx(addressStr));\n  }\n\n  getNamesEx(address) {\n    return _.map(this.matrixMap, (matrix, name) => matrix.findCellEx(address) && name).filter(\n      Boolean\n    );\n  }\n\n  _explore(matrix, cell) {\n    cell.mark = false;\n    const {sheetName} = cell;\n\n    const range = new Range(cell.row, cell.col, cell.row, cell.col, sheetName);\n    let x;\n    let y;\n\n    // grow vertical - only one col to worry about\n    function vGrow(yy, edge) {\n      const c = matrix.findCellAt(sheetName, yy, cell.col);\n      if (!c || !c.mark) {\n        return false;\n      }\n      range[edge] = yy;\n      c.mark = false;\n      return true;\n    }\n    for (y = cell.row - 1; vGrow(y, 'top'); y--);\n    for (y = cell.row + 1; vGrow(y, 'bottom'); y++);\n\n    // grow horizontal - ensure all rows can grow\n    function hGrow(xx, edge) {\n      const cells = [];\n      for (y = range.top; y <= range.bottom; y++) {\n        const c = matrix.findCellAt(sheetName, y, xx);\n        if (c && c.mark) {\n          cells.push(c);\n        } else {\n          return false;\n        }\n      }\n      range[edge] = xx;\n      for (let i = 0; i < cells.length; i++) {\n        cells[i].mark = false;\n      }\n      return true;\n    }\n    for (x = cell.col - 1; hGrow(x, 'left'); x--);\n    for (x = cell.col + 1; hGrow(x, 'right'); x++);\n\n    return range;\n  }\n\n  getRanges(name, matrix) {\n    matrix = matrix || this.matrixMap[name];\n\n    if (!matrix) {\n      return {name, ranges: []};\n    }\n\n    // mark and sweep!\n    matrix.forEach(cell => {\n      cell.mark = true;\n    });\n    const ranges = matrix\n      .map(cell => cell.mark && this._explore(matrix, cell))\n      .filter(Boolean)\n      .map(range => range.$shortRange);\n\n    return {\n      name,\n      ranges,\n    };\n  }\n\n  normaliseMatrix(matrix, sheetName) {\n    // some of the cells might have shifted on specified sheet\n    // need to reassign rows, cols\n    matrix.forEachInSheet(sheetName, (cell, row, col) => {\n      if (cell) {\n        if (cell.row !== row || cell.col !== col) {\n          cell.row = row;\n          cell.col = col;\n          cell.address = colCache.n2l(col) + row;\n        }\n      }\n    });\n  }\n\n  spliceRows(sheetName, start, numDelete, numInsert) {\n    _.each(this.matrixMap, matrix => {\n      matrix.spliceRows(sheetName, start, numDelete, numInsert);\n      this.normaliseMatrix(matrix, sheetName);\n    });\n  }\n\n  spliceColumns(sheetName, start, numDelete, numInsert) {\n    _.each(this.matrixMap, matrix => {\n      matrix.spliceColumns(sheetName, start, numDelete, numInsert);\n      this.normaliseMatrix(matrix, sheetName);\n    });\n  }\n\n  get model() {\n    // To get names per cell - just iterate over all names finding cells if they exist\n    return _.map(this.matrixMap, (matrix, name) => this.getRanges(name, matrix)).filter(\n      definedName => definedName.ranges.length\n    );\n  }\n\n  set model(value) {\n    // value is [ { name, ranges }, ... ]\n    const matrixMap = (this.matrixMap = {});\n    value.forEach(definedName => {\n      const matrix = (matrixMap[definedName.name] = new CellMatrix());\n      definedName.ranges.forEach(rangeStr => {\n        if (rangeRegexp.test(rangeStr.split('!').pop() || '')) {\n          matrix.addCell(rangeStr);\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = DefinedNames;\n"],"mappings":"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"}